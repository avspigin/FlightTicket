База данных и наполнение

CREATE DATABASE flight_repo;

create table airport
(
    code    char(3) primary key,
    country varchar(128) NOT NULL,
    city    varchar(128) NOT NULL
);

create table aircraft
(
    id    serial primary key,
    model varchar(128)
);

create table seat
(
    aircraft_id int REFERENCES aircraft,
    seat_no     char(4) NOT NULL,
    PRIMARY KEY (aircraft_id, seat_no)
);

create table flight
(
    id                     bigserial primary key,
    flight_no              varchar(16)                       NOT NULL,
    departure_date         timestamp                         NOT NULL,
    departure_airport_code char(3) REFERENCES airport (code) NOT NULL,
    arrival_date           timestamp                         NOT NULL,
    arrival_airport_code   char(3) REFERENCES airport (code) NOT NULL,
    aircraft_id            int REFERENCES aircraft           NOT NULL,
    status                 varchar(32)                       NOT NULL
);

create table ticket
(
    id             BIGSERIAL primary key,
    passport_no    varchar(64)              NOT NULL,
    passenger_name varchar(256)             NOT NULL,
    flight_id      bigint REFERENCES flight NOT NULL,
    seat_no        char(4)                  NOT NULL,
    cost           NUMERIC(8, 2)            NOT NULL,
    UNIQUE (flight_id, seat_no)
);



insert into airport (code, country, city)
values ('MNK', 'Беларусь', 'Минск'),
       ('LDN', 'Англия', 'Лондон'),
       ('MSK', 'Россия', 'Москва'),
       ('BSL', 'Испания', 'Барселона');

insert into aircraft (model)
values ('Боинг 777-300'),
       ('Боинг 737-300'),
       ('Аэробус A320-200'),
       ('Суперджет-100');

insert into seat (aircraft_id, seat_no)
select id, s.column1
from aircraft
         cross join (values ('A1'), ('A2'), ('B1'), ('B2'), ('C1'), ('C2'), ('D1'), ('D2') order by 1) s;

insert into flight (flight_no, departure_date, departure_airport_code, arrival_date, arrival_airport_code, aircraft_id,
                    status)
values ('MN3002', '2020-06-14T14:30', 'MNK', '2020-06-14T18:07', 'LDN', 1, 'ARRIVED'),
       ('MN3002', '2020-06-16T09:15', 'LDN', '2020-06-16T13:00', 'MNK', 1, 'ARRIVED'),
       ('BC2801', '2020-07-28T23:25', 'MNK', '2020-07-29T02:43', 'LDN', 2, 'ARRIVED'),
       ('BC2801', '2020-08-01T11:00', 'LDN', '2020-08-01T14:15', 'MNK', 2, 'DEPARTED'),
       ('TR3103', '2020-05-03T13:10', 'MSK', '2020-05-03T18:38', 'BSL', 3, 'ARRIVED'),
       ('TR3103', '2020-05-10T07:15', 'BSL', '2020-05-10T012:44', 'MSK', 3, 'CANCELLED'),
       ('CV9827', '2020-09-09T18:00', 'MNK', '2020-09-09T19:15', 'MSK', 4, 'SCHEDULED'),
       ('CV9827', '2020-09-19T08:55', 'MSK', '2020-09-19T10:05', 'MNK', 4, 'SCHEDULED'),
       ('QS8712', '2020-12-18T03:35', 'MNK', '2020-12-18T06:46', 'LDN', 2, 'ARRIVED');

insert into ticket (passport_no, passenger_name, flight_id, seat_no, cost)
values ('112233', 'Иван Иванов', 1, 'A1', 200),
       ('23234A', 'Петр Петров', 1, 'B1', 180),
       ('SS988D', 'Светлана Светикова', 1, 'B2', 175),
       ('QYASDE', 'Андрей Андреев', 1, 'C2', 175),
       ('POQ234', 'Иван Кожемякин', 1, 'D1', 160),
       ('898123', 'Олег Рубцов', 1, 'A2', 198),
       ('555321', 'Екатерина Петренко', 2, 'A1', 250),
       ('QO23OO', 'Иван Розмаринов', 2, 'B2', 225),
       ('9883IO', 'Иван Кожемякин', 2, 'C1', 217),
       ('123UI2', 'Андрей Буйнов', 2, 'C2', 227),
       ('SS988D', 'Светлана Светикова', 2, 'D2', 277),
       ('EE2344', 'Дмитрий Трусцов', 3, 'А1', 300),
       ('AS23PP', 'Максим Комсомольцев', 3, 'А2', 285),
       ('322349', 'Эдуард Щеглов', 3, 'B1', 99),
       ('DL123S', 'Игорь Беркутов', 3, 'B2', 199),
       ('MVM111', 'Алексей Щербин', 3, 'C1', 299),
       ('ZZZ111', 'Денис Колобков', 3, 'C2', 230),
       ('234444', 'Иван Старовойтов', 3, 'D1', 180),
       ('LLLL12', 'Людмила Старовойтова', 3, 'D2', 224),
       ('RT34TR', 'Степан Дор', 4, 'A1', 129),
       ('999666', 'Анастасия Шепелева', 4, 'A2', 152),
       ('234444', 'Иван Старовойтов', 4, 'B1', 140),
       ('LLLL12', 'Людмила Старовойтова', 4, 'B2', 140),
       ('LLLL12', 'Роман Дронов', 4, 'D2', 109),
       ('112233', 'Иван Иванов', 5, 'С2', 170),
       ('NMNBV2', 'Лариса Тельникова', 5, 'С1', 185),
       ('DSA586', 'Лариса Привольная', 5, 'A1', 204),
       ('DSA583', 'Артур Мирный', 5, 'B1', 189),
       ('DSA581', 'Евгений Кудрявцев', 6, 'A1', 204),
       ('EE2344', 'Дмитрий Трусцов', 6, 'A2', 214),
       ('AS23PP', 'Максим Комсомольцев', 6, 'B2', 176),
       ('112233', 'Иван Иванов', 6, 'B1', 135),
       ('309623', 'Татьяна Крот', 6, 'С1', 155),
       ('319623', 'Юрий Дувинков', 6, 'D1', 125),
       ('322349', 'Эдуард Щеглов', 7, 'A1', 69),
       ('DIOPSL', 'Евгений Безфамильная', 7, 'A2', 58),
       ('DIOPS1', 'Константин Швец', 7, 'D1', 65),
       ('DIOPS2', 'Юлия Швец', 7, 'D2', 65),
       ('1IOPS2', 'Ник Говриленко', 7, 'C2', 73),
       ('999666', 'Анастасия Шепелева', 7, 'B1', 66),
       ('23234A', 'Петр Петров', 7, 'C1', 80),
       ('QYASDE', 'Андрей Андреев', 8, 'A1', 100),
       ('1QAZD2', 'Лариса Потемнкина', 8, 'A2', 89),
       ('5QAZD2', 'Карл Хмелев', 8, 'B2', 79),
       ('2QAZD2', 'Жанна Хмелева', 8, 'С2', 77),
       ('BMXND1', 'Светлана Хмурая', 8, 'В2', 94),
       ('BMXND2', 'Кирилл Сарычев', 8, 'D1', 81),
       ('SS988D', 'Светлана Светикова', 9, 'A2', 222),
       ('SS978D', 'Андрей Желудь', 9, 'A1', 198),
       ('SS968D', 'Дмитрий Воснецов', 9, 'B1', 243),
       ('SS958D', 'Максим Гребцов', 9, 'С1', 251),
       ('112233', 'Иван Иванов', 9, 'С2', 135),
       ('NMNBV2', 'Лариса Тельникова', 9, 'B2', 217),
       ('23234A', 'Петр Петров', 9, 'D1', 189),
       ('123951', 'Полина Зверева', 9, 'D2', 234);

select f.id,
       f.flight_no,
       f.departure_airport_code || apd.city || '(' || apd.country || ') - ' || f.arrival_airport_code || apa.city ||
       '(' || apa.country || ')'                   fligth,
       f.departure_date || ' - ' || f.arrival_date date,
       ac.model
from flight f
         join aircraft ac on ac.id = f.aircraft_id
         join airport apa on f.arrival_airport_code = apa.code
         join airport apd on apd.code = f.departure_airport_code;

--1. Кто летел рейсом Минск - Лондон 2020-07-28, на месте B1
select t.passenger_name,
       t.seat_no,
       apd.city || '(' || apd.country || ') - ' || apa.city ||
       '(' || apa.country || ')' fligth
from ticket t
         join flight f on t.flight_id = f.id
         join airport apa on f.arrival_airport_code = apa.code
         join airport apd on apd.code = f.departure_airport_code
where apd.code = 'MNK'
  and apa.code = 'LDN'
  and f.departure_date = '2020-07-28T23:25'
  and t.seat_no = 'B1';

---ЧАТ гпт
SELECT t.passenger_name,
       t.passport_no,
       a_dep.city AS departure_airport,
       a_arr.city AS arrival_airport
FROM ticket t
         JOIN flight f ON t.flight_id = f.id
         JOIN airport a_dep ON f.departure_airport_code = a_dep.code
         JOIN airport a_arr ON f.arrival_airport_code = a_arr.code
WHERE f.flight_no = 'BC2801'
  AND f.departure_date = '2020-07-28T23:25'
  AND t.seat_no = 'B1';

--2. Какие 2 перелета были самыми длительными за все время
select f.id,
       f.flight_no,
       apd.city || '(' || apd.country || ') - ' || apa.city ||
       '(' || apa.country || ')'                   fligth,
       f.departure_date || ' - ' || f.arrival_date date,
       ac.model,
       f.arrival_date - f.departure_date           Flight_time
from flight f
         join aircraft ac on ac.id = f.aircraft_id
         join airport apa on f.arrival_airport_code = apa.code
         join airport apd on apd.code = f.departure_airport_code
order by Flight_time desc
limit 2;

--Чат гпт
SELECT id,
       flight_no,
       departure_date,
       arrival_date,
       (arrival_date - departure_date) AS duration
FROM flight
ORDER BY duration DESC
LIMIT 2;

--3. Минимальная и максимальная продолжительность перелета Минск - Лондон, сколько было таких перелетов
select f.id,
       apd.city || '(' || apd.country || ') - ' || apa.city ||
       '(' || apa.country || ')'                               rout,
       f.arrival_date - f.departure_date                       flight_time,
       (select min(arrival_date - departure_date) from flight) min_flight_time,
       (select max(arrival_date - departure_date) from flight) max_flight_time,
       (SELECT count(*) AS sum -- не знаю, может есть вариант сделать красивее
        FROM (SELECT *
              FROM flight f1
                       join airport apa1 on f1.arrival_airport_code = apa1.code
                       join airport apd1 on apd1.code = f1.departure_airport_code
              where apd1.city = 'Минск'
                and apa1.city = 'Лондон') as "f1a1a1*")
from flight f
         join airport apa on f.arrival_airport_code = apa.code
         join airport apd on apd.code = f.departure_airport_code
where apd.city = 'Минск'
  and apa.city = 'Лондон';

--Этот запрос сделал чат ГПТ
SELECT MIN(arrival_date - departure_date) AS min_duration,
       MAX(arrival_date - departure_date) AS max_duration,
       COUNT(*)                           AS flight_count
FROM flight
WHERE departure_airport_code = (SELECT code FROM airport WHERE city = 'Минск')
  AND arrival_airport_code = (SELECT code FROM airport WHERE city = 'Лондон');

--4. Сколько мест осталось свободным рейс 'MN3002', '2020-06-14'
select f.id,
       f.flight_no,
       apd.city || '(' || apd.country || ') - ' || apa.city ||
       '(' || apa.country || ')'                                                           fligth,
       f.departure_date || ' - ' || f.arrival_date                                         date,
       ac.id || ' ' || ac.model as                                                         model,
       (select count(*)
        from seat s3
                 join flight.flight f3 on s3.aircraft_id = f3.aircraft_id
        where flight_no = 'MN3002'
          and departure_date = '2020-06-14') - (select count(*)
                                                from ticket t2
                                                         join flight f2 on t2.flight_id = f2.id
                                                where flight_no = 'MN3002'
                                                  and departure_date = '2020-06-14T14:30') seats_free

from flight f
         join aircraft ac on ac.id = f.aircraft_id
         join airport apa on f.arrival_airport_code = apa.code
         join airport apd on apd.code = f.departure_airport_code
where f.flight_no = 'MN3002'
  and f.departure_date = '2020-06-14T14:30';
---Сделал очень сложно и не понятно, главное работает, думаю есть намного интереснее вариант
--Ниже это запрос чат гпт
SELECT (SELECT COUNT(*)
        FROM seat
        WHERE aircraft_id = (SELECT aircraft_id
                             FROM flight
                             WHERE flight_no = 'MN3002'
                               AND departure_date = '2020-06-14T14:30'))
           -
       (SELECT COUNT(*)
        FROM ticket
        WHERE flight_id = (SELECT id
                           FROM flight
                           WHERE flight_no = 'MN3002'
                             AND departure_date = '2020-06-14T14:30'))
           AS free_seats;

--5. Какие имена встречаются чаще всего и какую долю от числа всех пассажиров они составляют
select passenger_name,
       count(*) frequency,
       round(100.0 / (select count(passenger_name) from ticket) * count(*), 2)
from ticket
group by passenger_name
order by frequency desc;

--6. Вывести имена пассажиров и количество им купленных билетов
select passport_no,
       max(passenger_name) passangers,
       count(*)            count_ticket
from ticket
group by passport_no;

--7. Стоимость всех маршрутов по убыванию
select f.flight_no, a_dep.city, a_arr.city, t.cost
from ticket t
         join flight f on t.flight_id = f.id
         join airport a_arr on f.arrival_airport_code = a_arr.code
         join airport a_dep on a_dep.code = f.departure_airport_code
order by cost desc;

--8 Отобразить разницу в стоимости между текущим и ближайшими маршрутами в отсортированном списке
--чат гпт
SELECT t1.id               AS ticket_id,
       t1.flight_id,
       t1.passenger_name,
       t1.cost             AS current_cost,
       t2.cost             AS nearest_cost,
       (t1.cost - t2.cost) AS cost_difference
FROM ticket t1
         LEFT JOIN LATERAL (
    SELECT t2.cost
    FROM ticket t2
    WHERE t1.id <> t2.id
    ORDER BY ABS(t1.cost - t2.cost) ASC
    LIMIT 1
    ) t2 ON true
ORDER BY t1.cost;

-- Список полетов между датами по flight id
SELECT *
FROM ticket t
         JOIN flight f on f.id = t.flight_id
WHERE f.departure_date BETWEEN '2020-04-28T23:25' AND '2020-08-01T11:00';

CREATE TABLE users
(
    id       SERIAL PRIMARY KEY,
    name     VARCHAR(128) NOT NULL,
    birthday DATE         NOT NULL,
    email    VARCHAR(128) NOT NULL UNIQUE,
    password VARCHAR(32)  NOT NULL,
    role     VARCHAR(32)  NOT NULL,
    gender   VARCHAR(32)  NOT NULL
);
